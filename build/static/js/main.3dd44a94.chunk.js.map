{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","q1","q2","q3","a","b","c","q4","q7","id","name","age","isNullOrEmpty","input","alert","getDivisorsCount","n","arr","i","push","length","getAreaOfTriangle","side1","side2","side3","s","area","Math","sqrt","getMostCommon","array","counts","reduce","maxCount","max","Object","values","mostCommon","keys","filter","combineArrays","key","arrangeByName","r","console","log","this","onClick","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6OA2HeA,E,2MAvHbC,MAAQ,CAENC,GAAI,KACJC,GAAI,GACJC,GAAI,CAAC,CACHC,EAAG,EACHC,EAAG,EACHC,EAAG,IAELC,GAAI,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtCC,GAAI,CAAC,CACHC,GAAI,EACJC,KAAM,OAEN,CACAD,GAAI,EACJC,KAAM,SAEN,CACAD,GAAI,EACJC,KAAM,MACNC,IAAK,M,EAKTC,cAAgB,SAACC,GACdA,EAA+BC,MAAM,gBAA7BA,MAAM,gB,EAIjBC,iBAAmB,SAACC,GAClB,GAAIA,EAAI,EACNF,MAAM,oCACD,CAEL,IADA,IAAMG,EAAM,GACHC,EAAI,EAAGA,GAAKF,EAAGE,IAAWF,EAAEE,IAAM,GAAGD,EAAIE,KAAKD,GACvDJ,MAAsB,IAAfG,EAAIG,OAAgBJ,EAAI,YAAcC,K,EAKjDI,kBAAoB,SAACC,EAAOC,EAAOC,GACjC,GAAIF,EAAQ,GAAKC,EAAQ,GAAKC,EAAQ,EACpCV,MAAM,wCACD,GAAIQ,EAAQC,GAASC,GAASF,EAAQC,GAASC,GAASD,EAAQA,GAASC,EAC9EV,MAAM,mCACD,CACP,IAAMW,GAAKH,EAAQC,EAAQC,GAAO,EAC5BE,EAAQC,KAAKC,KAAKH,IAAIA,EAAEH,IAAQG,EAAEF,IAAQE,EAAED,KAClDV,MAAM,4BAA8BY,K,EAKtCG,cAAgB,SAACC,GACf,IACIC,EADOD,EACOE,QAAO,SAAC5B,EAAGC,GAE3B,OADAD,EAAEC,IAAMD,EAAEC,IAAM,GAAK,EACdD,IACN,IACC6B,EAAWN,KAAKO,IAAL,MAAAP,KAAI,YAAQQ,OAAOC,OAAOL,KACrCM,EAAaF,OAAOG,KAAKP,GAAQQ,QAAO,SAAAjC,GAAC,OAAIyB,EAAOzB,KAAO2B,KAC/DnB,MAAMuB,I,EAIRG,cAAgB,SAACV,EAAOW,GACtB,IAAIC,EAAgBZ,EAAME,QAAO,SAACW,EAAGvC,GAEnC,OADAuC,EAAEvC,EAAEM,MAAJ,sBAAgBiC,EAAEvC,EAAEM,OAAS,IAA7B,CAAiCN,IAC1BuC,IACL,IACJC,QAAQC,IAAI,kBAAmBH,I,wEAGvB,IAAD,SAOHI,KAAK9C,MALPC,EAFK,EAELA,GACAC,EAHK,EAGLA,GACAC,EAJK,EAILA,GACAI,EALK,EAKLA,GACAC,EANK,EAMLA,GAGF,OACE,oCACA,kCACA,4NACA,4BAAQuC,QAAS,WAAQ,EAAKnC,cAAcX,KAA5C,YAEA,kCACA,mPACA,4BAAQ8C,QAAS,WAAQ,EAAKhC,iBAAiBb,KAA/C,YAEA,kCACA,4MACA,4BAAQ6C,QAAS,WAAQ,EAAK1B,kBAAkBlB,EAAG,GAAGC,EAAGD,EAAG,GAAGE,EAAGF,EAAG,GAAGG,KAAxE,YAEA,kCACA,2MACA,4BAAQyC,QAAS,WAAQ,EAAKlB,cAActB,KAA5C,YAEA,kCACA,0CAEA,kCACA,0CAEA,kCACA,+OACA,4BAAQwC,QAAS,WAAQ,EAAKP,cAAchC,EAAI,UAAhD,YAEA,kCACA,sD,GAnHYwC,iBCUEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.3dd44a94.chunk.js","sourcesContent":["import React, { PureComponent } from 'react'\n\nclass App extends PureComponent {\n\n  state = {\n    // Feel free to change values to test\n    q1: null,\n    q2: 60,\n    q3: [{\n      a: 5,\n      b: 6,\n      c: 7,\n    }],\n    q4: [5, 4, 3, 2, 4, 5, 1, 6, 1, 2, 5, 4],\n    q7: [{\n      id: 1,\n      name: 'bob',\n    },\n      {\n      id: 2,\n      name: 'sally',\n    },\n      {\n      id: 3,\n      name: 'bob',\n      age: 30,\n    }]\n  }\n\n  // Question 1\n  isNullOrEmpty = (input) => {\n    !input ? alert('Falsy value') : alert('Truthy value')  \n  }\n\n  // Question 2\n  getDivisorsCount = (n) => {\n    if (n < 0) {\n      alert('Please use a positive number')\n    } else {\n      const arr = [];\n      for (var i = 0; i <= n; i++) { if (n%i === 0) arr.push(i); } \n      alert((arr.length === 0) ? n + ' is prime' : arr)\n    }\n  }\n\n  // Question 3\n  getAreaOfTriangle = (side1, side2, side3) => {\n    if (side1 < 0 || side2 < 0 || side3 < 0) {\n      alert('Please use all positive numbers')\n    } else if (side1 + side2 <= side3 || side1 + side2 <= side3 || side2 + side2 <= side3) {\n      alert('Please use a valid triangle')\n    } else {\n    const s = (side1 + side2 + side3)/2;\n    const area =  Math.sqrt(s*((s-side1)*(s-side2)*(s-side3)));\n    alert('Area of the triangle is: ' + area);\n    }\n  }\n\n  // Question 4\n  getMostCommon = (array) => {\n    let arr1 = array\n    let counts = arr1.reduce((a, b) => {\n      a[b] = (a[b] || 0) + 1;\n      return a;\n    }, {});\n    let maxCount = Math.max(...Object.values(counts));\n    let mostCommon = Object.keys(counts).filter(c => counts[c] === maxCount);\n    alert(mostCommon);\n  }\n\n  // Question 7\n  combineArrays = (array, key) => {\n    let arrangeByName = array.reduce((r, a) => {\n      r[a.name] = [...r[a.name] || [], a];\n      return r;\n     }, {});\n    console.log('arrangeByName: ', arrangeByName);\n  };\n\n  render() {\n    const {\n      q1,\n      q2,\n      q3,\n      q4,\n      q7,\n    } = this.state\n\n    return (\n      <>\n      <h3>Q1</h3>\n      <p>Using the most appropriate means, implement an \"isNullOrEmpty\" check on the standard String type. It should be functionally equivalent without calling any \"isNullOrEmpty\" built in function.</p>\n      <button onClick={() => { this.isNullOrEmpty(q1)}}>Run code</button>\n  \n      <h3>Q2</h3>\n      <p>Write a function that takes a single positive integer, and returns a collection / sequence (e.g. array) of integers. The return value should contain those integers that are positive divisors of the input integer.</p>\n      <button onClick={() => { this.getDivisorsCount(q2)}}>Run code</button>\n\n      <h3>Q3</h3>\n      <p>Write a function that takes three integer inputs and returns a single output. The inputs are the lengths of the sides of a triangle. The output is the area of that triangle.</p>\n      <button onClick={() => { this.getAreaOfTriangle(q3[0].a, q3[0].b, q3[0].c)}}>Run code</button>\n\n      <h3>Q4</h3>\n      <p>Write a function that takes an array of integers, and returns an array of integers. The return value should contain those integers which are most common in the input array.</p>\n      <button onClick={() => { this.getMostCommon(q4)}}>Run code</button>\n\n      <h3>Q5</h3>\n      <p>See SQL.txt</p>\n\n      <h3>Q6</h3>\n      <p>See SQL.txt</p>\n\n      <h3>Q7</h3>\n      <p>Write a function which combines an array of objects, grouped by a key you provide (this key will correspond to a key found in the objects. The function will index the new object with the value of those keys..</p>\n      <button onClick={() => { this.combineArrays(q7, 'name')}}>Run code</button>\n\n      <h3>Q8</h3>\n      <p>Unable to compete.</p>\n      </>\n    )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}